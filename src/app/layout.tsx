//head title, description, icon, langue

import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "../styles/layout.scss";
import ConditionalLayout from '@/components/layout/ConditionalLayout';
import HydrationFix from '@/components/common/HydrationFix';

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Checkout",
  icons: {
    icon: "/images/Logo/Crystal.png", 
  },
  description: "La plateforme gamifi√©e pour suivre ta progression et g√©rer ta collection de jeux vid√©o",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="fr">
      <head>
        {/* 
          üõ°Ô∏è FIX HYDRATATION - SCRIPT DE PROTECTION CONTRE LES EXTENSIONS
          ================================================================
          
          PROBL√àME : Les extensions de navigateur (Grammarly, LastPass, AdBlock, etc.) 
          ajoutent des attributs au DOM APR√àS que Next.js ait g√©n√©r√© le HTML c√¥t√© serveur.
          Cela cause des erreurs d'hydratation car Next.js d√©tecte une diff√©rence entre 
          le HTML serveur et le HTML client.
          
          SOLUTION : Ce script s'ex√©cute IMM√âDIATEMENT au chargement de la page (avant React)
          pour nettoyer tous les attributs probl√©matiques des extensions et masquer 
          les erreurs d'hydratation dans la console.
          
          TIMING : Plac√© dans <head> pour s'ex√©cuter le plus t√¥t possible
        */}
        <script
          dangerouslySetInnerHTML={{
            __html: `
              // üßπ FIX AGRESSIF POUR LES ATTRIBUTS D'EXTENSIONS DE NAVIGATEUR
              (function() {
                // üìã LISTE DES ATTRIBUTS PROBL√âMATIQUES AJOUT√âS PAR LES EXTENSIONS
                const PROBLEMATIC_ATTRS = [
                  'cz-shortcut-listen',           // ColorZilla (pipette couleur)
                  'spellcheck',                   // Correcteurs orthographiques
                  'data-new-gr-c-s-check-loaded', // Grammarly (v√©rification gramm.)
                  'data-gr-ext-installed',        // Grammarly (extension install√©e)
                  'data-gr-ext-disabled',         // Grammarly (extension d√©sactiv√©e)
                  'data-adblock',                 // Bloqueurs de publicit√©
                  'data-darkreader-mode',         // Dark Reader (mode sombre)
                  'data-darkreader-scheme',       // Dark Reader (sch√©ma couleur)
                  'data-lastpass-icon-warning',   // LastPass (gestionnaire mots de passe)
                  'data-1p-ignore',               // 1Password (ignorer ce champ)
                  'data-bitwarden-watching'       // Bitwarden (surveillance des champs)
                ];
                
                // üßº FONCTION DE NETTOYAGE ULTRA-AGRESSIF DU DOM
                // Supprime tous les attributs d'extensions de <html> et <body>
                function ultraCleanup() {
                  [document.documentElement, document.body].forEach(function(el) {
                    if (el && el.removeAttribute) {
                      PROBLEMATIC_ATTRS.forEach(function(attr) {
                        try {
                          if (el.hasAttribute && el.hasAttribute(attr)) {
                            el.removeAttribute(attr);
                          }
                        } catch(e) { /* ignore */ }
                      });
                    }
                  });
                }
                
                // üîá MASQUAGE DES ERREURS D'HYDRATATION DANS LA CONSOLE
                // Override console.error et console.warn pour cacher les messages d'hydratation
                const originalError = console.error;
                const originalWarn = console.warn;
                
                // üö´ FILTRE LES ERREURS D'HYDRATATION CAUS√âES PAR LES EXTENSIONS
                console.error = function() {
                  const args = Array.prototype.slice.call(arguments);
                  const message = args[0];
                  if (typeof message === 'string') {
                    // Patterns d'erreurs √† ignorer (caus√©es par les extensions)
                    const patterns = [
                      'A tree hydrated but some attributes',  // Attributs en plus d√©tect√©s
                      'cz-shortcut-listen',                   // ColorZilla sp√©cifique
                      'hydration-mismatch',                   // Diff√©rence serveur/client
                      'Hydration failed',                     // √âchec d'hydratation
                      'There was an error while hydrating',   // Erreur pendant hydratation
                      'Warning: Prop',                        // Props diff√©rentes
                      'Warning: Extra attributes'             // Attributs suppl√©mentaires
                    ];
                    
                    // Si le message contient un pattern d'erreur d'extension, l'ignorer
                    if (patterns.some(p => message.includes(p)) || 
                        PROBLEMATIC_ATTRS.some(attr => message.includes(attr))) {
                      return; // ‚õî Ignore compl√®tement cette erreur
                    }
                  }
                  // ‚úÖ Affiche les autres erreurs normalement (pas caus√©es par les extensions)
                  originalError.apply(console, args);
                };
                
                // üîï FILTRE AUSSI LES WARNINGS D'HYDRATATION
                console.warn = function() {
                  const args = Array.prototype.slice.call(arguments);
                  const message = args[0];
                  if (typeof message === 'string' && 
                      (message.includes('hydration') || message.includes('Prop'))) {
                    return;
                  }
                  originalWarn.apply(console, args);
                };
                
                // ‚è∞ NETTOYAGE √Ä PLUSIEURS MOMENTS POUR MAXIMISER L'EFFICACIT√â
                // Les extensions s'injectent √† diff√©rents moments du cycle de vie de la page
                ultraCleanup(); // ‚ö° Imm√©diat (au chargement du script)
                
                setTimeout(ultraCleanup, 0);   // üìÖ Prochain tick du navigateur
                setTimeout(ultraCleanup, 1);   // üìÖ 1ms (tr√®s t√¥t)
                setTimeout(ultraCleanup, 10);  // üìÖ 10ms (avant que React d√©marre)
                setTimeout(ultraCleanup, 50);  // üìÖ 50ms (pendant l'hydratation)
                setTimeout(ultraCleanup, 100); // üìÖ 100ms (apr√®s l'hydratation)
                
                // üëÅÔ∏è SURVEILLANCE CONTINUE DU DOM AVEC MUTATIONOBSERVER
                // D√©tecte quand les extensions ajoutent des attributs et nettoie imm√©diatement
                if (window.MutationObserver) {
                  const observer = new MutationObserver(function() {
                    ultraCleanup(); // üßπ Nettoie d√®s qu'une modification est d√©tect√©e
                  });
                  
                  // Observer d√®s que possible
                  function startObserving() {
                    try {
                      if (document.body) {
                        observer.observe(document.body, { 
                          attributes: true, 
                          attributeFilter: PROBLEMATIC_ATTRS 
                        });
                      }
                      if (document.documentElement) {
                        observer.observe(document.documentElement, { 
                          attributes: true, 
                          attributeFilter: PROBLEMATIC_ATTRS 
                        });
                      }
                    } catch(e) { /* ignore */ }
                  }
                  
                  startObserving();
                  setTimeout(startObserving, 10);
                }
                
                // üîÑ NETTOYAGE P√âRIODIQUE TOUTES LES 50MS (TR√àS AGRESSIF)
                // Pour les extensions particuli√®rement tenaces qui se r√©injectent
                setInterval(ultraCleanup, 50);
              })();
            `,
          }}
        />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased min-h-screen flex flex-col pt-[7%]`}
        suppressHydrationWarning={true}
      >
        <HydrationFix />
        <ConditionalLayout>
          {children}
        </ConditionalLayout>
      </body>
    </html>
  );
}
