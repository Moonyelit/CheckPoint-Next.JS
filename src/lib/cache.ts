/**
 * Syst√®me de cache hybride : Redis c√¥t√© serveur + M√©moire c√¥t√© client
 * 
 * Ce module g√®re le cache des donn√©es de jeux pour am√©liorer
 * significativement les performances et r√©duire la charge serveur.
 * 
 * üöÄ AVANTAGES :
 * - R√©duction drastique des temps de r√©ponse
 * - Moins de requ√™tes vers la base de donn√©es
 * - Moins d'appels vers l'API IGDB
 * - Meilleure exp√©rience utilisateur
 */

// Syst√®me de cache m√©moire uniquement

class MemoryCache {
  private cache: Record<string, any> = {};
  async get<T>(key: string): Promise<T | null> {
    return this.cache[key] ?? null;
  }
  async set<T>(key: string, value: T): Promise<void> {
    this.cache[key] = value;
  }
  async delete(key: string): Promise<void> {
    delete this.cache[key];
  }
  async clear(): Promise<void> {
    this.cache = {};
  }
}

export const GameCache = new MemoryCache();

// Fonction utilitaire pour g√©n√©rer les cl√©s de cache (remplace l'ancienne m√©thode statique)
export function generateCacheKey(type: string, identifier: string) {
  return `game:${type}:${identifier}`;
}

// Utilitaires pour les cl√©s de cache
export const CACHE_KEYS = {
  GAME_BY_SLUG: (slug: string) => generateCacheKey('slug', slug),
  GAME_BY_ID: (id: number) => generateCacheKey('id', id.toString()),
  SEARCH_RESULTS: (query: string) => generateCacheKey('search', query),
  POPULAR_GAMES: () => generateCacheKey('popular', 'list'),
  RECENT_GAMES: () => generateCacheKey('recent', 'list'),
  USER_PROFILE: (userId: number) => generateCacheKey('user', userId.toString()),
  USER_GAMES: (userId: number) => generateCacheKey('user_games', userId.toString()),
};

// Configuration des TTL par type de donn√©es
export const CACHE_TTL = {
  GAME_DATA: 24 * 60 * 60, // 24h - Les infos de jeux changent peu
  SEARCH_RESULTS: 60 * 60, // 1h - Les r√©sultats de recherche
  USER_DATA: 30 * 60, // 30min - Donn√©es utilisateur
  POPULAR_GAMES: 6 * 60 * 60, // 6h - Jeux populaires
  API_RESPONSES: 15 * 60, // 15min - R√©ponses API
}; 